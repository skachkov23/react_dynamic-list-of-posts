{"version":3,"sources":["api/api.ts","components/Loader/Loader.tsx","components/PostsList/PostsList.tsx","api/posts.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","api/comments.ts","components/UserSelect/UserSelect.tsx","App.tsx","index.tsx"],"names":["BASE_URL","request","endpoint","options","fetch","then","response","ok","Error","status","statusText","json","Loader","className","PostsList","currentUserId","postId","onChangePostId","useState","posts","setPosts","isLoaded","setIsLoaded","useEffect","userId","postsList","length","map","post","title","type","onClick","id","NewCommentForm","addComment","name","setName","email","setEmail","body","setBody","onSubmit","event","preventDefault","placeholder","required","value","onChange","currentTarget","PostDetails","details","setDetails","comments","setComments","commentsVisibility","setCommentsVisibility","getPostDetails","postDetails","getPostComments","postComments","onDelete","commentId","method","removeComment","prevComments","filter","prevComment","comment","newComment","headers","JSON","stringify","postComment","UserSelect","users","onChangeUserId","htmlFor","target","user","App","setUsers","setCurrentUserId","selectedUserPostId","setSelectedUserPostId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.123e6118.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = (endpoint: string, options = {}) => {\n  return fetch(`${BASE_URL}${endpoint}`, options)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { FC, useEffect, useState } from 'react';\n\nimport './PostsList.scss';\n\nimport { getUserPost } from '../../api/posts';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  currentUserId: number,\n  postId: number,\n  onChangePostId: (id: number) => void,\n};\n\nexport const PostsList: FC<Props> = (\n  {\n    currentUserId,\n    postId,\n    onChangePostId,\n  },\n) => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  useEffect(() => {\n    getUserPost(currentUserId)\n      .then(postsList => {\n        setPosts(postsList);\n        setIsLoaded(true);\n      });\n  }, [currentUserId]);\n\n  if (!isLoaded) {\n    return (<Loader />);\n  }\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n      {!posts.length && (\n        <p>Nothing was found for this user</p>\n      )}\n      <ul>\n        {posts.map(post => (\n          <li\n            className=\"PostsList__item\"\n            key={post.id}\n          >\n            <div>\n              <b>\n                {`[User #${post.userId}]:`}\n              </b>\n              {post.title}\n            </div>\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => {\n                onChangePostId(postId === post.id ? 0 : post.id);\n              }}\n            >\n              {postId === post.id\n                ? 'Close'\n                : 'Open'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import { request } from './api';\n\nexport const getUsers = (): Promise<User[]> => {\n  return request('/users');\n};\n\nexport const getUserPost = (userId: number): Promise<Post[]> => {\n  if (!userId) {\n    return request('/posts');\n  }\n\n  return request(`/posts?userId=${userId}`);\n};\n\nexport const getPostDetails = (postId: number): Promise<Post> => {\n  return request(`/posts/${postId}`);\n};\n","import React, { FC, useState } from 'react';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  postId: number;\n  addComment: (newComment: Comment) => void;\n};\n\nexport const NewCommentForm: FC<Props> = ({\n  postId,\n  addComment,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    addComment({\n      postId,\n      name,\n      email,\n      body,\n    } as Comment);\n\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          required\n          value={name}\n          onChange={event => setName(event.currentTarget.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          required\n          value={email}\n          onChange={event => setEmail(event.currentTarget.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          required\n          value={body}\n          onChange={event => setBody(event.currentTarget.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import { FC, useEffect, useState } from 'react';\n\nimport './PostDetails.scss';\n\nimport { NewCommentForm } from '../NewCommentForm';\nimport { getPostComments, postComment, removeComment } from '../../api/comments';\nimport { getPostDetails } from '../../api/posts';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  postId: number,\n};\n\nexport const PostDetails: FC<Props> = ({ postId }) => {\n  const [details, setDetails] = useState<Post | null>(null);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [commentsVisibility, setCommentsVisibility] = useState<boolean>(true);\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  useEffect(() => {\n    getPostDetails(postId)\n      .then(postDetails => {\n        setDetails(postDetails);\n        setIsLoaded(true);\n      });\n\n    getPostComments(postId)\n      .then(postComments => setComments([...postComments]));\n  }, [postId]);\n\n  const onDelete = (commentId: number) => {\n    removeComment(commentId)\n      .then(response => {\n        if (response) {\n          setComments(prevComments => prevComments\n            .filter(prevComment => prevComment.id !== commentId));\n        }\n      });\n  };\n\n  const onAdd = (newComment: Partial<Comment>) => {\n    postComment(newComment)\n      .then(response => setComments([...comments, response]));\n  };\n\n  if (!isLoaded) {\n    return (<Loader />);\n  }\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>\n        {`Post details: ${comments.length}`}\n      </h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{details?.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {comments.length ? (\n          <>\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => (setCommentsVisibility(!commentsVisibility))}\n            >\n              {commentsVisibility\n                ? `Hide ${comments.length} comments`\n                : `Show ${comments.length} comments`}\n            </button>\n\n            <ul className=\"PostDetails__list\">\n              {commentsVisibility && comments.map(comment => (\n                <li\n                  className=\"PostDetails__list-item\"\n                  key={comment.id}\n                >\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    onClick={() => onDelete(comment.id)}\n                  >\n                    x\n                  </button>\n                  <p>{comment.body}</p>\n                </li>\n              ))}\n            </ul>\n          </>\n        ) : (\n          <h3>Comment section is empty</h3>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postId={postId}\n            addComment={onAdd}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import { request } from './api';\n\nexport const getPostComments = (postId: number): Promise<Comment[]> => {\n  return request(`/comments?postId=${postId}`);\n};\n\nexport const removeComment = (commentId: number) => {\n  return request(`/comments/${commentId}`, {\n    method: 'DELETE',\n  });\n};\n\nexport const postComment = (newComment: Partial<Comment>) => {\n  return request('/comments', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(newComment),\n  });\n};\n","import { FC } from 'react';\n\ntype Props = {\n  users: User[],\n  currentUserId: number,\n  onChangeUserId: (id: number) => void,\n};\nexport const UserSelect: FC<Props> = ({\n  users,\n  currentUserId,\n  onChangeUserId,\n}) => (\n  <label htmlFor=\"selectUser\">\n    Select a user: &nbsp;\n\n    <select\n      className=\"App__user-selector\"\n      id=\"selectUser\"\n      value={currentUserId}\n      onChange={event => onChangeUserId(+event.target.value)}\n    >\n      <option value=\"0\">\n        All users\n      </option>\n      {users.map(user => (\n        <option\n          key={user.id}\n          value={user.id}\n        >\n          {user.name}\n        </option>\n      ))}\n    </select>\n  </label>\n);\n","import { FC, useEffect, useState } from 'react';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelect } from './components/UserSelect';\nimport { getUsers } from './api/posts';\n\nconst App: FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [currentUserId, setCurrentUserId] = useState(0);\n  const [selectedUserPostId, setSelectedUserPostId] = useState(0);\n\n  useEffect(() => {\n    getUsers()\n      .then(setUsers);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <UserSelect\n          users={users}\n          currentUserId={currentUserId}\n          onChangeUserId={setCurrentUserId}\n        />\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            currentUserId={currentUserId}\n            postId={selectedUserPostId}\n            onChangePostId={setSelectedUserPostId}\n          />\n        </div>\n        {selectedUserPostId > 0 && (\n          <div className=\"App__content\">\n            <PostDetails postId={selectedUserPostId} />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}